{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/radsaskara/Documents/Udemy/ZTM React/crown-cloth/client/src/component/signup/signup.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { signUpStart } from '../../redux/user/user.action';\nimport { connect } from 'react-redux';\nimport './signup.styles.scss';\n\nconst SignUp = ({\n  signUpStart\n}) => {\n  _s();\n\n  const [userCredential, setCredential] = useState({\n    displayName: '',\n    email: '',\n    password: '',\n    confPassword: ''\n  });\n  const {\n    displayName,\n    email,\n    password,\n    confPassword\n  } = userCredential;\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (password !== confPassword) {\n      alert('password dont match');\n      return;\n    }\n\n    signUpStart({\n      displayName,\n      email,\n      password\n    });\n  };\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setCredential({ ...userCredential,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sign-up\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"title\",\n      children: \"I dont have an account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Sign up with your email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"sign-up-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormInput, {\n        type: \"text\",\n        name: \"displayName\",\n        value: displayName,\n        onChange: handleChange,\n        required: true,\n        label: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        type: \"email\",\n        name: \"email\",\n        value: email,\n        onChange: handleChange,\n        required: true,\n        label: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        type: \"password\",\n        name: \"password\",\n        value: password,\n        onChange: handleChange,\n        required: true,\n        label: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        type: \"password\",\n        name: \"confPassword\",\n        value: confPassword,\n        onChange: handleChange,\n        required: true,\n        label: \"Confirm Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n        type: \"Submit\",\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 7\n  }, this);\n};\n\n_s(SignUp, \"jw/Wku81zrQI/M/qjeU1+/HnRrU=\");\n\n_c = SignUp;\n\nconst mapDispatchToProps = dispatch => ({\n  signUpStart: userCredentials => dispatch(signUpStart(userCredentials))\n});\n\nexport default connect(null, mapDispatchToProps)(SignUp);\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUp\");","map":{"version":3,"sources":["/Users/radsaskara/Documents/Udemy/ZTM React/crown-cloth/client/src/component/signup/signup.component.jsx"],"names":["React","useState","FormInput","CustomButton","signUpStart","connect","SignUp","userCredential","setCredential","displayName","email","password","confPassword","handleSubmit","e","preventDefault","alert","handleChange","name","value","target","mapDispatchToProps","dispatch","userCredentials"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport FormInput from '../form-input/form-input.component'\nimport CustomButton from '../custom-button/custom-button.component'\nimport {signUpStart} from '../../redux/user/user.action'\nimport {connect} from 'react-redux'\nimport './signup.styles.scss'\n\nconst SignUp= ({signUpStart}) => {\n\n  const [userCredential,setCredential] = useState({displayName:'',email:'',password:'',confPassword:''})\n\n  const {displayName,email,password,confPassword} = userCredential;\n\n  const handleSubmit = async e => {\n    e.preventDefault(); \n\n    if(password !== confPassword){\n      alert('password dont match')\n      return;\n    }\n\n    signUpStart({displayName,email,password})\n  }\n\n  const handleChange = e =>{\n    const {name,value} = e.target;\n\n    setCredential({...userCredential,[name]:value})\n  }\n    return(\n      <div className='sign-up'>\n        <h2 className='title'>I dont have an account</h2>\n        <span>Sign up with your email</span>\n        <form className='sign-up-form' onSubmit={handleSubmit}>\n          <FormInput type=\"text\" name='displayName' value={displayName} onChange = {handleChange} required label=\"Name\"/>\n          <FormInput type=\"email\" name='email' value={email} onChange = {handleChange} required label=\"Email\"/>\n          <FormInput type=\"password\" name='password' value={password} onChange={handleChange} required label=\"Password\"/>\n          <FormInput type=\"password\" name='confPassword' value={confPassword} onChange={handleChange} required label=\"Confirm Password\"/>\n          <CustomButton type=\"Submit\">Sign Up</CustomButton>\n        </form>\n      </div>\n    )\n}\n\nconst mapDispatchToProps = dispatch => ({\n  signUpStart: userCredentials => dispatch(signUpStart(userCredentials )) \n})\n\nexport default connect(null,mapDispatchToProps)(SignUp);"]},"metadata":{},"sourceType":"module"}