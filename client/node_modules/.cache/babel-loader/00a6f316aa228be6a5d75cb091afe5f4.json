{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { firestore, convertSnapshotToMap } from '../../firebase/firebase.config';\nimport { fetchCollectionFail, fetchCollectionSuccess } from './shop.action';\nimport ShopActionType from './shop.type';\nexport function* fetchCollectionAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertSnapshotToMap, snapshot);\n    yield put(fetchCollectionSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionFail(error.message));\n  }\n}\nexport function* fetchCollectionStart() {\n  yield takeLatest(ShopActionType.FETCH_COLLETCIONS_START, fetchCollectionAsync);\n}\nexport function* shopSaga() {\n  yield all([call(fetchCollectionStart)]);\n}","map":{"version":3,"sources":["/Users/radsaskara/Documents/Udemy/ZTM React/crown-cloth/client/src/redux/shop/shop.saga.js"],"names":["takeLatest","call","put","all","firestore","convertSnapshotToMap","fetchCollectionFail","fetchCollectionSuccess","ShopActionType","fetchCollectionAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionStart","FETCH_COLLETCIONS_START","shopSaga"],"mappings":"AAAA,SAAQA,UAAR,EAAmBC,IAAnB,EAAwBC,GAAxB,EAA4BC,GAA5B,QAAsC,oBAAtC;AACA,SAAQC,SAAR,EAAkBC,oBAAlB,QAA6C,gCAA7C;AACA,SAAQC,mBAAR,EAA6BC,sBAA7B,QAA0D,eAA1D;AACA,OAAOC,cAAP,MAA2B,aAA3B;AAEA,OAAO,UAAUC,oBAAV,GAAgC;AACrC,MAAI;AACF,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMb,IAAI,CAACI,oBAAD,EAAsBO,QAAtB,CAAjC;AACA,UAAMV,GAAG,CAACK,sBAAsB,CAACO,cAAD,CAAvB,CAAT;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACd,UAAMb,GAAG,CAACI,mBAAmB,CAACS,KAAK,CAACC,OAAP,CAApB,CAAT;AACD;AAEF;AAED,OAAO,UAAUC,oBAAV,GAAgC;AACrC,QAAMjB,UAAU,CAACQ,cAAc,CAACU,uBAAhB,EAAwCT,oBAAxC,CAAhB;AACD;AAED,OAAO,UAAUU,QAAV,GAAoB;AACzB,QAAMhB,GAAG,CAAC,CAACF,IAAI,CAACgB,oBAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import {takeLatest,call,put,all} from 'redux-saga/effects'\nimport {firestore,convertSnapshotToMap} from '../../firebase/firebase.config'\nimport {fetchCollectionFail, fetchCollectionSuccess} from './shop.action'\nimport ShopActionType from './shop.type'\n\nexport function* fetchCollectionAsync(){ \n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertSnapshotToMap,snapshot)\n    yield put(fetchCollectionSuccess(collectionsMap))\n  } catch (error) {\n    yield put(fetchCollectionFail(error.message))\n  }\n\n}\n\nexport function* fetchCollectionStart(){\n  yield takeLatest(ShopActionType.FETCH_COLLETCIONS_START,fetchCollectionAsync)\n}\n\nexport function* shopSaga(){\n  yield all([call(fetchCollectionStart)])\n}"]},"metadata":{},"sourceType":"module"}