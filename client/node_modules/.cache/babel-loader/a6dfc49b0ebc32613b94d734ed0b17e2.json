{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyDy88KV8bV1Ynf2iO3cq-KqsC1tq_7yu4c\",\n  authDomain: \"react-crown-db-a5dbc.firebaseapp.com\",\n  databaseURL: \"https://react-crown-db-a5dbc.firebaseio.com\",\n  projectId: \"react-crown-db-a5dbc\",\n  storageBucket: \"react-crown-db-a5dbc.appspot.com\",\n  messagingSenderId: \"231230877102\",\n  appId: \"1:231230877102:web:5aef0948a11ff2a8b1ac3f\",\n  measurementId: \"G-SP48XQC2Z1\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, etc) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...etc\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocs = async (collectionKey, addedObject) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  addedObject.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertSnapshotToMap = collection => {\n  const transformCollection = collection.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  transformCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signinGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/radsaskara/Documents/Udemy/ZTM React/crown-cloth/src/firebase/firebase.config.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","etc","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","set","err","console","log","addCollectionAndDocs","collectionKey","addedObject","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertSnapshotToMap","transformCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signinGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\n\nconst config = {\n  apiKey: \"AIzaSyDy88KV8bV1Ynf2iO3cq-KqsC1tq_7yu4c\",\n  authDomain: \"react-crown-db-a5dbc.firebaseapp.com\",\n  databaseURL: \"https://react-crown-db-a5dbc.firebaseio.com\",\n  projectId: \"react-crown-db-a5dbc\",\n  storageBucket: \"react-crown-db-a5dbc.appspot.com\",\n  messagingSenderId: \"231230877102\",\n  appId: \"1:231230877102:web:5aef0948a11ff2a8b1ac3f\",\n  measurementId: \"G-SP48XQC2Z1\"\n};\n\n\nfirebase.initializeApp(config)\n\nexport const createUserProfileDocument = async (userAuth, etc) => {\n  if(!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`)\n  const snapshot = await userRef.get();\n\n  if(!snapshot.exists){\n    const {displayName, email} = userAuth;\n    const createdAt = new Date();\n\n    try{\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...etc\n      })\n    }catch(err){\n        console.log(err);\n    }\n\n  }\n  return userRef;\n}\n\nexport const addCollectionAndDocs = async (collectionKey, addedObject)=>{\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch();\n  addedObject.forEach(obj =>{\n    const newDocRef = collectionRef.doc()\n    batch.set(newDocRef,obj)\n  })\n\n  return await batch.commit()\n}\n\nexport const convertSnapshotToMap = (collection) => {\n  const transformCollection = collection.docs.map(doc => {\n    const {title,items} = doc.data();\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    }\n  })\n\n  transformCollection.reduce((accumulator,collection)=>{\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  },{})\n}\n\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({prompt: 'select_account'})\n\nexport const signinGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n\n"]},"metadata":{},"sourceType":"module"}